/**
 * \addtogroup argParser
 * The Argument Parser can be used to easily parse lists of strings for commands and values
 * @{
 */

/**
 * \page page_argParser How to use the argument parser library
 *
 * You need to include this header
 * \code{.cpp}
 * #include "clockUtils/argParser/ArgumentParser.h"
 * \endcode
 *
 * The usage is really simple and contains just two steps:\n\n
 *
 * First you have to register all variables that should be parseable, that means every argument. For this reason there is the macro REGISTER_VARIABLE(type, longname, shortname, value, description). The five arguments it expects are the type of variable, the long and short name of the option (the long name is used as the variable name in the code), a default value and a description for the --help/-h functionality.\n
 * If the variable type contains a comma (e.g. Template class with several parameters) create a typedef (C++ Preprocessor can't handle commas correctly)\n\n
 * Example :\n
 * \code{.cpp}
 * REGISTER_VARIABLE(std::string, myStr, s, "english", "a string containing the used language");
 * REGISTER_VARIABLE(bool, boolOption, b, false, "a bool value");
 * \endcode
 * The first line will give you a std::string variable with the name \em myStr being initialized with "english". The two possibilities in a command line to change this variable are:\n
 * \code
 * myProgram --string german
 * myProgram -s german
 * \endcode
 * The boolean option can be change by passing "true" or "false" as the value. Additionally for the case of bool, only the name is sufficient to set it to \em true.
 * \code
 * myProgram --boolOption
 * myProgram -b
 * \endcode
 * The second step is to parse your list. Therefor, two macros exist:\n
 * PARSE_COMMANDLINE() parses the arguments of the main method implicitly assuming (argc and argv)\n
 * PARSE_ARGUMENTS(buffer, length) parses an own list\n
 *
 * Two options are automatically available for a help output.
 * \code
 * --help
 * -h
 * \endcode
 * The macro HELPSET() says whether the help optioon was given and the text output can be retrieved using GETHELPTEXT()\n
 * Example Usage:\n
 * \code{.cpp}
 * if (HELPSET()) {
 * 	std::cout << GETHELPTEXT() << std::endl;
 * }
 * \endcode
 * \n
 * In some cases you want to ignore additional entries at the end of the commandline or you want to support more than one parameter e.g. multiple files. Therefore you can register a std::vector<std::string> using REGISTER_VARIABLE_ARGUMENTS(name) where name is the name of the variable. All additional entries are pushed into this vector.\n
 * Example:\n
 * \code{.cpp}
 * int main(int argc, const char ** argv) {
 *  REGISTER_VARIABLE_ARGUMENTS(files);
 *  PARSE_COMMANDLINE();
 *  std::cout << "Processing " << files.size() << " files" << std::endl;
 * }
 * \endcode
 * When executing the program as follows ...
 * \code
 * myProgram a b c
 * \endcode
 * ... the \em files vector contains three values.
 *
 */

/**
 * @}
 */
